{"version":3,"sources":["ng://rut-chileno/lib/rut.service.ts","ng://rut-chileno/lib/rut.component.ts","ng://rut-chileno/lib/rut.module.ts"],"names":["RutService","prototype","rutFormat","value","rut","this","rutClean","length","result","slice","substr","i","replace","toUpperCase","validaRUT","valor","cuerpo","dv","suma","multiplo","Number","charAt","toString","getRutChile","mode","r","ru","factory","ɵfac","providedIn","RutComponent","rut_emiter","EventEmitter","ngOnInit","msjError","msjE","rut_chileno","validacionRut","validaRUT_","sendEmiterRut","emit","selectors","inputs","outputs","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","$event","target","i0.ɵɵelementEnd","i0.ɵɵtext","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","RutModule","imports","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RutService {\n\n  constructor() { }\n\n  rutFormat(value: string): string {\n    const rut: string = this.rutClean(value);\n    if (rut.length <= 1) {\n      return;\n    }\n\n    let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n    for (let i = 4; i < rut.length; i += 3) {\n      result = `${rut.slice(-3 - i, -i)}.${result}`;\n    }\n\n    return result;\n  }\n\n  rutClean(value: string): string {\n    return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n  }\n  \n  validaRUT(rut: string): boolean {\n    let valor: string = rut;\n    valor = this.rutClean(valor);\n  \n    // Aislar Cuerpo y Dígito Verificador\n    const cuerpo = valor.slice(0, -1);\n    let dv = valor.slice(-1).toUpperCase();\n  \n    // Si no cumple con el mínimo ej. (n.nnn.nnn)\n    if (cuerpo.length < 7 && cuerpo.length >= 0) {\n      return true;\n    }\n  \n    // Calcular Dígito Verificador\n    let suma = 0;\n    let multiplo = 2;\n  \n    // Para cada dígito del Cuerpo\n    for (let i = 1; i <= cuerpo.length; i++) {\n      // Obtener su Producto con el Múltiplo Correspondiente\n      const index = multiplo * Number(valor.charAt(cuerpo.length - i));\n  \n      // Sumar al Contador General\n      suma = suma + index;\n  \n      // Consolidar Múltiplo dentro del rango [2,7]\n      if (multiplo < 7) {\n        multiplo = multiplo + 1;\n      } else {\n        multiplo = 2;\n      }\n    }\n  \n    // Calcular Dígito Verificador en base al Módulo 11\n    const dvEsperado = 11 - (suma % 11);\n  \n    // Casos Especiales (0 y K)\n    dv = dv === 'K' ? '10' : dv;\n    dv = dv === '0' ? '11' : dv;\n  \n    // Validar que el Cuerpo coincide con su Dígito Verificador\n    if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n  getRutChile(mode: number ,rut: string): string | boolean {\n\n    if(!this.validaRUT(rut)) {\n      switch (mode) {\n        // el rut limpio 184215551\n        case 0:\n          return this.rutClean(rut);\n        // solo el cuerpo del rut  18421555\n        case 1:\n          let valor: string = rut;\n          valor = this.rutClean(valor);\n          let cuerpo = valor.slice(0, -1);\n          return cuerpo;\n        // rut formateado 18.421.555-1\n        case 2:\n          return this.rutFormat(rut);\n        // rut cuerpo - digitov : 18421555-1  \n        case 3:\n            let r: string = rut;\n            r = this.rutClean(r);\n            const c = r.slice(0, -1);\n            let dv = r.slice(-1).toUpperCase();\n            return c + '-'+ dv;\n        case 4:\n          let ru: string = rut;\n          ru = this.rutClean(ru);\n          let div = ru.slice(-1).toUpperCase();\n          return div; \n      }\n    } else {\n      return false;\n    }\n      \n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'rut-chile',\n  template: `\n  <input type=\"text\"\n  [(ngModel)] = \"rut_chileno\"\n  (focus)=\"rutFormat($event.target.value)\"\n  (keydown)=\"rutFormat($event.target.value)\"\n  (keyup)=\"rutFormat($event.target.value)\"\n  (keypress)=\"validaRUT($event.target.value)\"\n  (blur)=\"validaRUT($event.target.value)\"\n  class=\"input-rut rut\" name=\"username\" id=\"rut_chileno\" placeholder=\"Rut\">\n  <small class=\"danger-rut\" [hidden]=\"!validacionRut\">\n      {{msjE}}\n  </small>\n  `,\n  styles: [\n  ]\n})\nexport class RutComponent implements OnInit {\n\n  @Output() rut_emiter = new EventEmitter<string | number>();\n  @Input() mode: number;\n  @Input() msjError: string;\n\n  validacionRut!: boolean;\n  rut_chileno!: string;\n  msjE!:string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    if(!this.msjError)\n      this.msjE = \"El rut ingresado no es válido.\";\n    else\n      this.msjE = this.msjError;\n  }\n\n  rutFormat(value: string): void {\n    const rut: string = this.rutClean(value);\n    if (rut.length <= 1) {\n      return;\n    }\n\n    let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n    for (let i = 4; i < rut.length; i += 3) {\n      result = `${rut.slice(-3 - i, -i)}.${result}`;\n    }\n    \n    this.rut_chileno = result;\n  }\n\n  rutClean(value: string): string {\n    return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n  }\n  \n  validaRUT(rut: string): void {\n    this.validacionRut = this.validaRUT_(rut);\n    this.sendEmiterRut(this.rut_chileno);\n  }\n\n  validaRUT_(rut: string): boolean {\n    let valor: string = rut;\n    valor = this.rutClean(valor);\n  \n    const cuerpo = valor.slice(0, -1);\n    let dv = valor.slice(-1).toUpperCase();\n  \n    if (cuerpo.length < 7 && cuerpo.length >= 0) {\n      return true;\n    }\n  \n    let suma = 0;\n    let multiplo = 2;\n  \n    for (let i = 1; i <= cuerpo.length; i++) {\n      const index = multiplo * Number(valor.charAt(cuerpo.length - i));\n      suma = suma + index;\n      if (multiplo < 7) {\n        multiplo = multiplo + 1;\n      } else {\n        multiplo = 2;\n      }\n    }\n  \n    const dvEsperado = 11 - (suma % 11);\n    dv = dv === 'K' ? '10' : dv;\n    dv = dv === '0' ? '11' : dv;\n  \n    if (dvEsperado.toString() !== dv && cuerpo.length >= 0)\n      return true;\n    else \n      return false;\n  }\n\n  sendEmiterRut(rut: string): void {\n    if(!this.validacionRut) {\n      switch (this.mode) {\n        case 0:\n          this.rut_emiter.emit(this.rutClean(rut));\n          break;\n        case 1:\n          let valor: string = rut;\n          this.rut_emiter.emit(this.rutClean(valor).slice(0, -1));\n          break;\n        case 2:\n          this.rut_emiter.emit(rut);\n          break;\n        case 3:\n            let r: string = rut;\n            this.rut_emiter.emit(this.rutClean(r).slice(0, -1) + '-'+ r.slice(-1).toUpperCase());\n            break;  \n        case 4:\n          let ru: string = rut;\n          this.rut_emiter.emit(this.rutClean(ru).slice(-1).toUpperCase());\n          break;    \n      }\n    }\n      \n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RutComponent } from './rut.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RutComponent],\n  imports: [\n    FormsModule\n  ],\n  exports: [RutComponent]\n})\nexport class RutModule { }\n"]}